diff --git a/compiler/cpp/src/generate/t_cocoa_generator.cc b/compiler/cpp/src/generate/t_cocoa_generator.cc
index 7e26ee2..80de159 100644
--- a/compiler/cpp/src/generate/t_cocoa_generator.cc
+++ b/compiler/cpp/src/generate/t_cocoa_generator.cc
@@ -201,6 +201,7 @@ class t_cocoa_generator : public t_oop_generator {
 
   std::string cocoa_prefix_;
   std::string constants_declarations_;
+  std::string constants_declarations_additions_;
 
   /**
    * File streams
@@ -296,6 +297,7 @@ void t_cocoa_generator::close_generator()
   // stick our constants declarations at the end of the header file
   // since they refer to things we are defining.
   f_header_ << constants_declarations_ << endl;
+  
 }
 
 /**
@@ -352,6 +354,25 @@ void t_cocoa_generator::generate_enum(t_enum* tenum) {
  */
 void t_cocoa_generator::generate_consts(std::vector<t_const*> consts) {
   std::ostringstream const_interface;
+
+  // create static const variable for each non-container structs
+  vector<t_const*>::iterator c_iter;
+  for (c_iter = consts.begin(); c_iter != consts.end(); ++c_iter) {
+
+    string name = (*c_iter)->get_name();
+    t_type* type = (*c_iter)->get_type();
+    
+    if (!type->is_container() && !type->is_struct()) {
+      const_interface << 
+      "static const " << type_name(type) << " " << cocoa_prefix_ << name << " = " << 
+      render_const_value(f_header_, type, (*c_iter)->get_value()) << ";" << endl;
+    } else {
+      const_interface << "static " << type_name(type) << " " << cocoa_prefix_ << name << ";" << endl;
+    }
+  }
+  const_interface << endl;
+
+
   string constants_class_name = cocoa_prefix_ + program_name_ + "Constants";
 
   const_interface << "@interface " << constants_class_name << " : NSObject ";
@@ -359,12 +380,17 @@ void t_cocoa_generator::generate_consts(std::vector<t_const*> consts) {
   scope_down(const_interface);
 
   // getter method for each constant defined.
-  vector<t_const*>::iterator c_iter;
   for (c_iter = consts.begin(); c_iter != consts.end(); ++c_iter) {
     string name = (*c_iter)->get_name();
     t_type* type = (*c_iter)->get_type();
-    const_interface <<
-      "+ (" << type_name(type) << ") " << name << ";" << endl;
+
+    if (!type->is_container() && !type->is_struct()) {
+      const_interface <<
+      "+ (const " << type_name(type) << ") " << name << ";" << endl;
+    } else {
+      const_interface <<
+      "+ (" << type_name(type) << ") " << name << ";" << endl;
+    }
   }
 
   const_interface << "@end";
@@ -372,18 +398,6 @@ void t_cocoa_generator::generate_consts(std::vector<t_const*> consts) {
   // this gets spit into the header file in ::close_generator
   constants_declarations_ = const_interface.str();
 
-  // static variables in the .m hold all constant values
-  for (c_iter = consts.begin(); c_iter != consts.end(); ++c_iter) {
-    string name = (*c_iter)->get_name();
-    t_type* type = (*c_iter)->get_type();
-    f_impl_ <<
-      "static " << type_name(type) << " " << cocoa_prefix_ << name;
-    if (!type->is_container() && !type->is_struct()) {
-      f_impl_ << " = " << render_const_value(f_impl_, type, (*c_iter)->get_value());
-    }
-    f_impl_ << ";" << endl;
-  }
-  f_impl_ << endl;
 
   f_impl_ << "@implementation " << constants_class_name << endl;
 
@@ -408,8 +422,12 @@ void t_cocoa_generator::generate_consts(std::vector<t_const*> consts) {
   for (c_iter = consts.begin(); c_iter != consts.end(); ++c_iter) {
     string name = (*c_iter)->get_name();
     t_type* type = (*c_iter)->get_type();
-    f_impl_ <<
-      "+ (" << type_name(type) << ") " << name;
+    if (!type->is_container() && !type->is_struct()) {
+      f_impl_ << "+ (const " << type_name(type) << ") " << name;
+    } else {
+      f_impl_ << "+ (" << type_name(type) << ") " << name;
+    }
+
     scope_up(f_impl_);
     indent(f_impl_) << "return " << cocoa_prefix_ << name << ";" << endl;
     scope_down(f_impl_);
